---
import type { CollectionEntry } from "astro:content";
import Project from "../components/Project.astro";
import Layout from "../layouts/Layout.astro";
import { getCollection } from "astro:content";

const currentProjects = await getCollection("projects", ({ data }) => {
	return data.endDate === undefined;
});
const completedProjects = await getCollection("projects", ({ data }) => {
	return data.endDate !== undefined;
});

function getProjectsMap(projects: CollectionEntry<"projects">[]) {
	const sorted = projects.sort(
		// Latest.
		({ data: a }, { data: b }) => b.startDate.getTime() - a.startDate.getTime(),
	);

	const map: Map<number, CollectionEntry<"projects">[]> = new Map();

	sorted.forEach((project) => {
		const key = project.data.startDate.getFullYear();
		if (!map.has(key)) {
			map.set(key, []);
		}
		map.get(key)?.push(project);
	});

	return map;
}

const currentProjectsMap = getProjectsMap(currentProjects);
const completedProjectsMap = getProjectsMap(completedProjects);

const projects = [
	...currentProjectsMap.values(),
	...completedProjectsMap.values(),
].flat();
---

<script>
	class ProjectList extends HTMLElement {
		constructor() {
			super();

			const projects = this.querySelectorAll(".project");
			const buttons = this.querySelectorAll("button");

			buttons.forEach((button, i) => {
				button.addEventListener("click", () => {
					setActiveProject(i);
				});
			});

			function setActiveProject(index: number) {
				projects.forEach((project, j) => {
					if (index === j) {
						project.classList.remove("hidden");
					} else {
						project.classList.add("hidden");
					}
				});

				buttons.forEach((button, j) => {
					if (index === j) {
						button.classList.add("underline");
					} else {
						button.classList.remove("underline");
					}
				});
			}

			setActiveProject(0);
		}
	}

	customElements.define("project-list", ProjectList);
</script>

<Layout title="Projects">
	<project-list>
		<section
			class="mx-auto grid max-w-screen-xl items-baseline gap-8 px-4 py-32 sm:grid-cols-[1fr_3fr] sm:gap-4 lg:text-xl"
		>
			<div
				class="top-5 left-0 flex justify-between gap-4 sm:sticky sm:flex-col sm:gap-8"
			>
				<div class="flex-1">
					<div class="border-b-2">
						<p class="text-center">Current Projects</p>
					</div>
					<div
						class="max-h-[448px] overflow-y-scroll border-r-2 [border-image:linear-gradient(to_bottom,#fff,#00000000)_1_100%]"
					>
					</div>
				</div>

				<div class="flex-1">
					<div class="border-b-2">
						<p class="text-center">Completed Projects</p>
					</div>
					<div
						class="max-h-[448px] overflow-y-scroll border-r-2 [border-image:linear-gradient(to_bottom,#fff,#00000000)_1_100%]"
					>
						{
							[...completedProjectsMap.entries()].map(([year, projects]) => (
								<div class="py-8">
									<p class="">{year}</p>
									<ul class="grid gap-4">
										{projects.map((project) => (
											<li class="px-4">
												<button class="cursor-pointer text-start hover:underline">
													{project.data.title}
												</button>
											</li>
										))}
									</ul>
								</div>
							))
						}
					</div>
				</div>
			</div>

			<div>
				{
					projects.map((project, i) => (
						<div class="project">
							<header class="border-b-2">
								<h1 class="text-center font-heading text-4xl">
									{project.data.title}
								</h1>
							</header>

							<div class="p-4">
								<Project project={project} />
							</div>
						</div>
					))
				}
			</div>
		</section>
	</project-list>
</Layout>
